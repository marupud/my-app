{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\saite\\\\Downloads\\\\my-app\\\\my-app\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport './App.css';\nimport { GET_FILMS, GET_PEOPLE_LIST } from './actions';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nconst useStyles = makeStyles(theme => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2)\n  }\n}));\n\nconst App = ({\n  loading,\n  list,\n  films,\n  getTotalPeopleList,\n  getFilms\n}) => {\n  _s();\n\n  const classes = useStyles();\n  const [filterText, setFilterText] = useState('');\n  const [filmsList, setFilmsList] = useState(null);\n  const [selectedFilm, setSelectedFilm] = useState(null);\n  const [filmSelect, setFilmSelect] = useState('');\n  const [filmName, setFilmName] = useState('');\n  const filteredList = list.filter(item => ~item.name.toLowerCase().indexOf(filterText.toLowerCase()));\n  useEffect(() => {\n    getTotalPeopleList();\n    getFilms();\n  }, []);\n\n  const handleChange = val => {\n    setFilmSelect(val.currentTarget.innerText);\n    const unique = filteredList.filter(item => item.name == val.currentTarget.innerText);\n    const filmsData = films.filter(value => unique[0].films.find(ele => ele == value.url));\n    setFilmsList(filmsData);\n  };\n\n  const onFilmSelect = e => {\n    setFilmName(e.target.value);\n    const selectedFilms = films.filter(ele => ele.title === e.target.value);\n    setSelectedFilm(selectedFilms);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [filteredList.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(FormControl, {\n        className: classes.formControl,\n        children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n          id: \"demo-simple-select-label\",\n          children: \"Select\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          labelId: \"demo-simple-select-label\",\n          id: \"demo-simple-select\",\n          value: filmSelect,\n          onChange: e => handleChange(e),\n          children: filteredList.map(item => /*#__PURE__*/_jsxDEV(MenuItem, {\n            value: item.name,\n            children: [\" \", item.name]\n          }, item.value, true, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 11\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), filmsList && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(FormControl, {\n        className: classes.formControl,\n        children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n          shrink: true,\n          htmlFor: \"select-multiple-native\",\n          children: \"Films\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          multiple: true,\n          native: true,\n          value: filmName,\n          onChange: onFilmSelect,\n          children: filmsList.map(item => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: item.title,\n            children: item.title\n          }, item.title, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: selectedFilm && selectedFilm.map(val => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [val.title, \" - \", val.release_date.split('-')[0]]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"hA9cccgcpjLSCXPnU8XYoYbr8VE=\", false, function () {\n  return [useStyles];\n});\n\n_c = App;\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.loading,\n    list: state.list,\n    films: state.films\n  };\n};\n\nconst mapDispatchToProps = {\n  getTotalPeopleList: GET_PEOPLE_LIST,\n  getFilms: GET_FILMS\n};\nexport { App };\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/saite/Downloads/my-app/my-app/src/App.js"],"names":["React","useEffect","useState","connect","GET_FILMS","GET_PEOPLE_LIST","Select","MenuItem","InputLabel","FormControl","makeStyles","useStyles","theme","formControl","margin","spacing","minWidth","selectEmpty","marginTop","App","loading","list","films","getTotalPeopleList","getFilms","classes","filterText","setFilterText","filmsList","setFilmsList","selectedFilm","setSelectedFilm","filmSelect","setFilmSelect","filmName","setFilmName","filteredList","filter","item","name","toLowerCase","indexOf","handleChange","val","currentTarget","innerText","unique","filmsData","value","find","ele","url","onFilmSelect","e","target","selectedFilms","title","length","map","release_date","split","mapStateToProps","state","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport './App.css';\nimport { GET_FILMS, GET_PEOPLE_LIST } from './actions';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120\n  },  \n  selectEmpty: {\n    marginTop: theme.spacing(2)\n  }\n}));\n\nconst App = ({ loading, list, films, getTotalPeopleList, getFilms }) => {\n  const classes = useStyles();\n  const [filterText, setFilterText] = useState('');\n  const [filmsList, setFilmsList] = useState(null);\n  const [selectedFilm, setSelectedFilm] = useState(null)\n  const [filmSelect, setFilmSelect] = useState('')\n  const [filmName, setFilmName] = useState('')\n  const filteredList = list.filter(item =>\n    ~item.name.toLowerCase().indexOf(filterText.toLowerCase())\n  );\n  useEffect(() => {\n    getTotalPeopleList();\n    getFilms()\n  }, []);\n  const handleChange = (val) => {\n    setFilmSelect(val.currentTarget.innerText)\n    const unique = filteredList.filter((item) => item.name == val.currentTarget.innerText);\n    const filmsData = films.filter((value) => unique[0].films.find((ele) => ele == value.url));\n    setFilmsList(filmsData)\n  }\n  const onFilmSelect = (e) => {\n    setFilmName(e.target.value)\n    const selectedFilms = films.filter((ele) => ele.title === e.target.value)\n    setSelectedFilm(selectedFilms)\n\n  }\n  return (\n    <div>\n      {filteredList.length >0 &&\n      <div>  \n\n      <FormControl className={classes.formControl}>\n        <InputLabel id=\"demo-simple-select-label\">Select</InputLabel>\n        <Select\n          labelId=\"demo-simple-select-label\"\n          id=\"demo-simple-select\"\n          value = {filmSelect}\n          onChange={(e) => handleChange(e)}\n        >\n        {filteredList.map(item => (\n          <MenuItem key={item.value} value={item.name}> {item.name}</MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n        {/* <select onChange={handleChange} >\n          {filteredList.map(item => (\n            <option key={item.value} value={item.value}>\n              {item.name}\n            </option>\n          ))}\n        </select> */}\n      </div>\n}\n      {filmsList &&\n        <div>\n\n        <FormControl className={classes.formControl}>\n            <InputLabel shrink htmlFor=\"select-multiple-native\">\n              Films\n            </InputLabel>\n            <Select\n              multiple\n              native\n              value={filmName}\n              onChange={onFilmSelect}\n            >\n              {filmsList.map((item) => (\n                <option key={item.title} value={item.title}>\n                  {item.title}\n                </option>\n              ))}\n            </Select>\n        </FormControl>\n\n          {/* <select onChange={onFilmSelect}  >\n            {filmsList.map(item => (\n              <option key={item.title} value={item.title}>\n                {item.title}\n              </option>\n            ))}\n          </select> */}\n        </div>\n      }\n\n      <div>\n        {selectedFilm && selectedFilm.map((val) =>\n          <p>{val.title} - {val.release_date.split('-')[0]}</p>\n        )\n\n        }\n\n      </div>\n    </div>\n\n  );\n};\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.loading,\n    list: state.list,\n    films: state.films\n  }\n};\n\nconst mapDispatchToProps = {\n  getTotalPeopleList: GET_PEOPLE_LIST,\n  getFilms: GET_FILMS\n};\n\nexport { App };\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n"]},"metadata":{},"sourceType":"module"}